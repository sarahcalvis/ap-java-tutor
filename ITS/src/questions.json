{
	{
		"text": "Consider the following output.\n\t1  1  1  1  12  2  2  23  3  34  45\n\nWhich of the following code segments will produce this output?",
		"answers": {
			"for (int j = 1; j <= 5; j++){\n\tfor (int k = 5; k >= j; k--){\n\t\tSystem.out.print(j + \"  \");\n\t}\n\tSystem.out.println();\n}",
			"for (int j = 1; j <= 5; j++){\n\tfor (int k = 1; k <= 5; k++){\n\t\tSystem.out.print(j + \"  \");\n\t}\n\tSystem.out.println();\n}",
			"for (int j = 1; j <= 5; j++){\n\tfor (int k = 1; k <= j; k++){\n\t\tSystem.out.print(j + \"  \");\n\t}\n\tSystem.out.println();\n}",
			"for (int j = 1; j <= 5; j++){\n\tfor (int k = j; k <= 5; k++){\n\t\tSystem.out.print(k + \"  \");\n\t}\n\tSystem.out.println();\n}"
		},
		"topic": "Control Statements",
		"Bloom": 5
	},
	{
		"text": "Which of the following lines represents a primitive data type?",
		"answers": {
			"char",
			 "ArrayList<String>",
			 "String",
			 "Integer"
		},
		"topic": "Primitive Types",
		"Bloom": 2
	},
	{
		"text": "What\'s wrong with the following code?\n\n\tvoid printsometext(){\n\t\tSystem.println(\"Printing text\n\");\n\t\tfor(int i=0; i<3; i++){\n\t\t\tSystem.println(i + \"\n\");\n\t\t}\n\t\treturn 5;\n\t}",
		"answers": {
			 "Void functions can't return ints.",
			 "The loop is formatted incorrectly.",
			 "There should be a semicolon after the function declaration.",
			 "The character '\n' does not exist."
		},
		"topic": "Methods",
		"Bloom": 5
	},
	{		
		"text": "Which of the following operations allow you to define the function func1() outside of the class definition?",
		"answers": {
			 "public",
			 "class school",
			 "{",
			 "school();"
		},
		"topic": "Methods",
		"Bloom": 1
	},
	{
		"text": "Consider the following code segment.\n\n\tfor (int k = 0; k < 20; k = k + 2){\n\t\tif (k % 3 == 1){\n\t\t\tSystem.out.print(k + \"  \");\n\t\t  }\n\t}\n\nWhat is printed as a result of executing the code segment?",
		"answers": {
			 "4  10  16",
			 "4  16",
			 "0  6  12  18",
			 "0  2  4  6  8  10  12  14  16  18"
		},
		"topic": "Control Statements"
		"Bloom": 3
	},
	{
		"text": "Consider the following code segment.\n\n\tList<String> animals = new ArrayList<String>();\n\tanimals.add(\"dog\");\n\tanimals.add(\"cat\");\n\tanimals.add(\"snake\");\n\tanimals.set(2, \"lizard\");\n\tanimals.add(1, \"fish\");\n\tanimals.remove(3);\n\tSystem.out.println(animals);\n\n\tWhat is printed as a result of executing the code segment?",
		"answers": {
			 "[dog, fish, cat]",
			 "[dog, fish, lizard]",
			 "[dog, lizard, fish]",
			 "The code throws anArrayIndexOutOfBoundsExceptionexception."
		},
		"topic": "Arrays",
		"Bloom": 1
	},
	{
		"text": "Consider two strings, stringA and stringB. How would we test these strings for equivalence?",
		"answers": {
			 "stringA.equals(stringB)",
			 "stringA = stringB",
			 "stringA == stringB",
			 "stringA.isEqual(stringB)"
		},
		"topic": "Arrays", 
		"Bloom": 1
	},
	{
		"text": "What must be true immediately after the following code snippet has run?\n\n\tdouble square(double n){\n\t\treturn n*n;\n\t}",
		"answers": {
			 "The result will be positive.",
			 "It is impossible to tell.",
			 "The result will be stored in a new variable.",
			 "The result will be a negative number."
		},
		"topic": "Operators", 
		"Bloom": 3
	},
	{
		"text": "Which one of these is not a primitive type?",
		"answers": {
			 "String",
			 "int",
			 "boolean",
			 "double"
		},
		"topic": "Primitive Types",
		"Bloom": 1
	},
	{
		"text": "What does JVM stand for?",
		"answers": {
			 "Java Virtual Machine",
			 "Jumpsuits Via Mail Order",
			 "Jesuits Visiting Maryland",
			 "Jamaican Vertebral Mechanism"
		},
		"topic": "Primitive Types",
		"Bloom": 1,
	},
	{
		"text": "int x = 0;\nfor (int i = 0; i < 9; i*=2) {\n\tx++;\n}\n\nWhat is the value of x after the above code finishes executing?",
		"answers": {
			"0",
			"4",
			"8",
			"9"
		},
		"topic": "Control Statements",
		"Bloom": 4,
	},
	{
		"text": "A _____ is a special method that initializes an object.",
		"answers": {
			"constructor",
			"class",
			"string literal",
			"working product"
		},
		"topic": "Constructors",
		"Bloom": 1
	},
	{
		"text": "An object is an instance of a _____.",
		"answers": {
			"class",
			"variable",
			"JUnit test",
			"program"
		},
		"topic": "Classes",
		"Bloom": 2
	},
	{
		"text": "File file = new File(\"words.txt\");\nScanner scan = new Scanner(file);\n\nWhat exception needs to be handled in a program containing these lines?",
			"answers": {
				"FileNotFoundException",
				"ScannerNotFoundException",
				"No exceptions could be thrown by this code.",
				"NullPointerException"
			},
		"topic": "Exceptions",
		"Bloom": 1
	},
	{
		"text": "Implicit if not defined, every class has a ______.",
		"answers": {
			 "constructor",
			 "variable",
			 "JUnit test",
			 "IDE"
		},
		"topic": "Classes",
		"Bloom": 3,
	},
	{
		"text": "Which one of the following is a legal comment?",
		"answers": {
			 "// your comment, my good sir",
			 "/**/yo dawg here is a comment",
			 "\\my brethren I give you this comment",
			 "/consider yourself commented, my guy"
		},
		"topic": "Comments",
		"Bloom": 2,
	},
	{
		"text": "How is a JavaDoc block begun?",
		"answers": {
			 "/**",
			 "/JD/",
			 "//",
			 "*/*"
		},
		"topic": "Comments",
		"Bloom": 1
	},
	{
		"text": "What is the escape sequence that denotes a newline?",
		"answers": {
			 "\n",
			 "|n",
			 "/n",
			 "\\n",
		},
		"topic": "Escape Sequences",
		"Bloom": 1
	},
	{
		"text": "What does '\t' denote?",
		"answers": {
			 "tab",
			 "space",
			 "title",
			 "Terrence"
		},
		"topic": "Escape Sequences",
		"Bloom": 1
	},
	{
		"text": "Which of the following is the best equals() method for class 'car?'\n\nclass car{\n\tint numWheels;\n\tint miles;\n\tString name;\n\tString model;\n\n\tcar(String name, String model){\n\t\tthis.name = name;\n\t\tthis.model = model;\n\t}\n}",
			"answers": {
				 "boolean equals(car a, car b){\n\treturn (a.numWheels == b.numWheels\n\t&& a.miles == b.miles\n\t&& a.name.equals(b.name)\n\t&& a.model.equals(b.model));\n}",
				 "boolean equals(car a, car b){\n\treturn (a.miles == b.miles\n\t&& a.name.equals(b.name)\n\t&& a.model.equals(b.model));\n}",
				 "boolean equals(car a, car b){\n\treturn (a.numWheels == b.numWheels\n\t&& a.name.equals(b.name)\n\t&& a.model.equals(b.model));\n}",
				 "boolean equals(car a, car b){\n\treturn (a.numWheels == b.numWheels\n\t&& a.miles == b.miles\n\t&& a.name.equals(b.name));\n}"
			},
		"topic": "Object Comparison",
		"Bloom": 5
	},
	{
		"text": "To initialize a scanner:\n\nScanner scnr = new Scanner(_________);",
		"answers": {
			 "System.in",
			 "Input.sys",
			 "iostream",
			 "Terrence"
		},
		"topic": "I/O",
		"Bloom": 1
	},
	{
		"text": "A class name is usually...",
		"answers": {
			 "a noun",
			 "a verb",
			 "a preposition",
			 "private to that class"
		},
		"topic": "Classes",
		"Bloom": 3
	},
	{
		"text": "Which of these will give the number of elements in an array a?",
		"answers": {
			 "a.length",
			 "a.length()",
			 "a.size",
			 "a.size()"
		},
		"topic": "Arrays",
		"Bloom": 2
	},
	{
		"text": "Which one of these is a proper array declaration?",
		"answers": {
			 "int[] a = new int[7];",
			 "int[] a = new int[];",
			 "char c[] = new char[];",
			 "char c [7];"
		},
		"topic": "Arrays",
		"Bloom": 2
	},
	{
		"text": "Which package needs to be imported to use System.out.println?",
		"answers": {
			 "No packages needed",
			 "java.io",
			 "ioStream",
			 "stdio"
		},
		"topic": "I/O",
		"Bloom": 2
	},
	{
		"text": "What will the following code return? Assume a is true, b is false, and c is true.\n\t((a && (b || c)) || b)",
		"answers": {
			 "true",
			 "false",
			 "5",
			 "c"
		},
		"topic": "Operators",
		"Bloom": 4
	},
	{
		"text": "What will be the result of the following code?\n\na[4] = {2, 3, 5, 8};\n\nfor(int i = 0; i == a.length; i++){\n\tc += a[i];\n}\n\nSystem.out.println(c);",
		"answers": {
			 "OutOfBoundsException",
			 "IllegalArgumentException",
			 "18",
			 "10"
		},
		"topic": "Exceptions",
		"Bloom": 3
	},
	{
		"text": "Consider the following class:\n\nclass Node{\n\tint numStuff;\n\tdouble thing;\n\n\tNode(int numStuff, double thing){\n\t\tnumStuff = numStuff;\n\t\tthing = thing;\n\t}\n}\n\nWhat needs to be changed to produce the desired results?",
		"answers": {
			 "'this.' needs to be inserted before the left hand variables in the constructor",
			 "'this.' needs to be inserted before the right hand variables in the constructor",
			 "The code will work as is",
			3, "Terrence"
		},
		"topic": "Constructors",
		"Bloom": 5
	},
	{
		"text": "What is a block comment?",
		"answers": {
			 "Multiple lines enclosed by /**/",
			 "Multiple lines enclosed by // //",
			 "Block comments are just an urban legend",
			 "String"
		},
		"topic": "Comments",
		"Bloom": 1
	},
	{
		"text": "What is the value of an uninitialized int variable?",
		"answers": {
			 "null",
			 "0",
			 "int",
			3, 
		},
		"topic": "Variables",
		"Bloom": 2
	},
	{
		"text": "To which of these types can operators NOT be applied?",
		"answers": {
			 "String",
			 "int",
			 "char",
			 "double"
		},
		"topic": "Operators",
		"Bloom": 2		
	},
	{
		"text": "Object obj1;\nObject obj2;\nWhich one of these check whether obj1 and obj2 hold the same attributes?",
		"answers": {
			 "none of these",
			 "obj1 = obj2;",
			 "obj1 == obj2;",
			 "obj1.equals(obj2);"
		},
		"topic": "Object Comparison",
		"Bloom": 3
	},
	{
		"text": "What will this print?\n\tSystem.out.print(\"\tJava is hot.\");",
		"answers": {
			 "\tJava is hot.",
			 "\tJava is \\n hot.",
			 "\tJava is hot.",
			 "\t\"Java is hot.\
		},
		"topic": "Escape Sequences",
		"Bloom": 2
	},
	{
		"text": "How do you resolve an uncaught exception?",
		"answers": {
			 "Any of these",
			 "Add a throws declaration",
			 "Surround it with a try/catch block",
			 "None of these"
		},
		"topic": "Exceptions",
		"Bloom": 5
	},
	{
		"text": "Which of these is a legal variable name in Java?",
		"answers": {
			 "var",
			 "this",
			 "new",
			 "string"
		},
		"topic": "Variables",
		"Bloom": 1
	},
	{
		"text": "Which of these types would you use for a variable to hold someone's bank balance?",
		"answers" {
			 "double",
			 "long",
			 "int",
			 "char"
		},
		"topic": "Variables",
		"Bloom": 4
	},
	{
		"text": "A _ 's name is usually a verb",
		"answers": {
			 "method",
			 "object",
			 "class",
			 "main"
		},
		"topic": "Methods",
		"Bloom": 4
	},
	{
		"text": "Which one of these allows you to initialize an object?",
		"answers": {
			 "constructor",
			 "method header",
			 "main",
			 "class"
		},
		"topic": "Constructors",
		"Bloom": 1
	},
	{
		"text": "An interface is...?",
		"answers": {
			 "A collection of abstract methods",
			 "An environment for developing Java code",
			 "An instance of a class",
			 "Essential for the working product"
		},
		"topic": "Interfaces",
		"Bloom": 3
	},
	{
		"text": "All methods in an interface are by default _______.",
		"answers" {
			 "abstract",
			 "private",
			 "void",
			 "overloaded",
		"topic": "Interfaces",
		"Bloom": 2
	},
	{
		"text": "Which of these is NOT a key way in which interfaces differ from classes?",
		"answers": {
			 "An interface cannot have methods",
			 "An interface cannot be instantiated",
			 "Everything in an interface is abstract",
			3, "A class does not extend an interface but implements it"
		},
		"topic": "Interfaces",
		"Bloom": 4
	},
	{
		"text": "What package contains the necessary imports to read and write to files?",
		"answers": {
			 "java.io",
			 "java.file",
			 "java.util",
			 "java.lang"
		},
		"topic": "Packages",
		"Bloom": 1
	},
	{
		"text": "What keyword would you use to add a package to your project?",
		"answers": {
			 "import",
			 "add",
			 "include",
			 "package"
		},
		"topic": "Packages",
		"Bloom": 1
	},
	{
		"text": "What do packages do?",
		"answers": {
			 "prevent naming conflicts",
			 "control access to classes",
			 "make searching classes easier",
			 "all of the above"
		},
		"topic": "Packages",
		"Bloom": 3
	},
	{
		"text": "Which of these is not a principle of object oriented programmming?",
		"answers": {
			 "iteration",
			 "abstraction",
			 "polymorphism",
			 "inheritance"
		},
		"topic": "Miscellaneous Object Oriented Programming",
		"Bloom": 5
	},
	{
		"text": "An object...",
		"answers": {
			 "Is an instance of a class",
			 "Is a variable",
			 "Belongs to a package",
			 "Is always private"
		}
		"topic": "Miscellaneous Object Oriented Programming",
		"Bloom": 5
	},
	{
		"text": "What is encapsulation?",
		"answers": {
			 "Keeping data hidden from methods that don't explicitly need that data",
			 "An instace of a class",
			 "A working product",
			 "A new form of packaging"
		},
		"topic": "Miscellaneous Object Oriented Programming",
		"Bloom": 4
	},
	{
		"text": "Which of these will correctly compare objects obj1 and obj2?",
		"answers": {
			 "none of these",
			 "obj1 = obj2",
			 "obj1 == obj2",
			 "obj1.equals(obj2)"
		},
		"topic": "Object Comparison",
		"Bloom": 4
	},
	{
		"text": "What is the default delimiter for Scanner.next()?",
		"answers": {
			 "Whitespace",
			 "//",
			 "Only /n",
			 "Terrence"
		},
		"topic": "I/O",
		"Bloom": 4
	}
}