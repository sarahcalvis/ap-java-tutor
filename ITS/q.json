 [
	{
		"text": "Consider the following output.\n\t1  1  1  1  12  2  2  23  3  34  45\n\nWhich of the following code segments will produce this output?",
		"answers": {
			"0": "for (int j = 1; j <= 5; j++){\n\tfor (int k = 5; k >= j; k--){\n\t\tSystem.out.print(j + \"  \");\n\t}\n\tSystem.out.println();\n}",
			"1": "for (int j = 1; j <= 5; j++){\n\tfor (int k = 1; k <= 5; k++){\n\t\tSystem.out.print(j + \"  \");\n\t}\n\tSystem.out.println();\n}",
			"2": "for (int j = 1; j <= 5; j++){\n\tfor (int k = 1; k <= j; k++){\n\t\tSystem.out.print(j + \"  \");\n\t}\n\tSystem.out.println();\n}",
			"3": "for (int j = 1; j <= 5; j++){\n\tfor (int k = j; k <= 5; k++){\n\t\tSystem.out.print(k + \"  \");\n\t}\n\tSystem.out.println();\n}"
		},
		"topic": "Control Statements",
		"Bloom": "5"
	},
	{
		"text": "Which of the following lines represents a primitive data type?",
		"answers": {
			"0": "char",
			"1": "ArrayList<String>",
			"2": "String",
			"3": "Integer"
		},
		"topic": "Primitive Types",
		"Bloom": "2"
	},
	{
		"text": "What\\'s wrong with the following code?\n\n\tvoid printsometext(){\n\t\tSystem.println(\"Printing text\n\");\n\t\tfor(int i=0; i<3; i++){\n\t\t\tSystem.println(i + \"\n\");\n\t\t}\n\t\treturn 5;\n\t}",
		"answers": {
			"0": "Void functions can't return ints.",
			"1": "The loop is formatted incorrectly.",
			"2": "There should be a semicolon after the function declaration.",
			"3": "The character '\n' does not exist."
		},
		"topic": "Methods",
		"Bloom": "5"
	},
	{		
		"text": "Which of the following operations allow you to define the function func1() outside of the class definition?",
		"answers": {
			"0": "public",
			"1": "class school",
			"2": "{",
			"3": "school();"
		},
		"topic": "Methods",
		"Bloom": "1"
	},
	{
		"text": "Consider the following code segment.\n\n\tfor (int k = 0; k < 20; k = k + 2){\n\t\tif (k % 3 == 1){\n\t\t\tSystem.out.print(k + \"  \");\n\t\t  }\n\t}\n\nWhat is printed as a result of executing the code segment?",
		"answers": {
			"0": "4  10  16",
			"1": "4  16",
			"2": "0  6  12  18",
			"3": "0  2  4  6  8  10  12  14  16  18"
		},
		"topic": "Control Statements",
		"Bloom": "3"
	},
	{
		"text": "Consider the following code segment.\n\n\tList<String> animals = new ArrayList<String>();\n\tanimals.add(\"dog\");\n\tanimals.add(\"cat\");\n\tanimals.add(\"snake\");\n\tanimals.set(2, \"lizard\");\n\tanimals.add(1, \"fish\");\n\tanimals.remove(3);\n\tSystem.out.println(animals);\n\n\tWhat is printed as a result of executing the code segment?",
		"answers": {
			"0": "[dog, fish, cat]",
			"1": "[dog, fish, lizard]",
			"2": "[dog, lizard, fish]",
			"3": "The code throws anArrayIndexOutOfBoundsExceptionexception."
		},
		"topic": "Arrays",
		"Bloom": "1"
	},
	{
		"text": "Consider two strings, stringA and stringB. How would we test these strings for equivalence?",
		"answers": {
			"0": "stringA.equals(stringB)",
			"1": "stringA = stringB",
			"2": "stringA == stringB",
			"3": "stringA.isEqual(stringB)"
		},
		"topic": "Arrays", 
		"Bloom": "1"
	},
	{
		"text": "What must be true immediately after the following code snippet has run?\n\n\tdouble square(double n){\n\t\treturn n*n;\n\t}",
		"answers": {
			"0": "The result will be positive.",
			"1": "It is impossible to tell.",
			"2": "The result will be stored in a new variable.",
			"3": "The result will be a negative number."
		},
		"topic": "Operators", 
		"Bloom": "3"
	},
	{
		"text": "Which one of these is not a primitive type?",
		"answers": {
			"0": "String",
			"1": "int",
			"2": "boolean",
			"3": "double"
		},
		"topic": "Primitive Types",
		"Bloom": "1"
	},
	{
		"text": "What does JVM stand for?",
		"answers": {
			"0": "Java Virtual Machine",
			"1": "Jumpsuits Via Mail Order",
			"2": "Jesuits Visiting Maryland",
			"3": "Jamaican Vertebral Mechanism"
		},
		"topic": "Primitive Types",
		"Bloom": "1"
	},
	{
		"text": "int x = 0;\nfor (int i = 0; i < 9; i*=2) {\n\tx++;\n}\n\nWhat is the value of x after the above code finishes executing?",
		"answers": {
			"0": "0",
			"1": "4",
			"2": "8",
			"3": "9"
		},
		"topic": "Control Statements",
		"Bloom": "4"
	},
	{
		"text": "A _____ is a special method that initializes an object.",
		"answers": {
			"0": "constructor",
			"1": "class",
			"2": "string literal",
			"3": "working product"
		},
		"topic": "Constructors",
		"Bloom": "1"
	},
	{
		"text": "An object is an instance of a _____.",
		"answers": {
			"0": "class",
			"1": "variable",
			"2": "JUnit test",
			"3": "program"
		},
		"topic": "Classes",
		"Bloom": "2"
	},
	{
		"text": "File file = new File(\"words.txt\");\nScanner scan = new Scanner(file);\n\nWhat exception needs to be handled in a program containing these lines?",
		"answers": {
			"0": "FileNotFoundException",
			"1": "ScannerNotFoundException",
			"2": "No exceptions could be thrown by this code.",
			"3": "NullPointerException"
		},
		"topic": "Exceptions",
		"Bloom": "1"
	},
	{
		"text": "Implicit if not defined, every class has a ______.",
		"answers": {
			"0": "constructor",
			"1": "variable",
			"2": "JUnit test",
			"3": "IDE"
		},
		"topic": "Classes",
		"Bloom": "3"
	},
	{
		"text": "Which one of the following is a legal comment?",
		"answers": {
			"0": "// your comment, my good sir",
			"1": "/**/yo dawg here is a comment",
			"2": "\\my brethren I give you this comment",
			"3": "/consider yourself commented, my guy"
		},
		"topic": "Comments",
		"Bloom": "2"
	},
	{
		"text": "How is a JavaDoc block begun?",
		"answers": {
			"0": "/**",
			"1": "/JD/",
			"2": "//",
			"3": "*/*"
		},
		"topic": "Comments",
		"Bloom": "1"
	},
	{
		"text": "What is the escape sequence that denotes a newline?",
		"answers": {
			"0": "\\n",
			"1": "|n",
			"2": "/n",
			"3": "|n|"
		},
		"topic": "Escape Sequences",
		"Bloom": "1"
	},
	{
		"text": "What does '\\t' denote?",
		"answers": {
			"0": "tab",
			"1": "space",
			"2": "title",
			"3": "Terrence"
		},
		"topic": "Escape Sequences",
		"Bloom": "1"
	},
	{
		"text": "Which of the following is the best equals() method for class 'car?'\n\nclass car{\n\tint numWheels;\n\tint miles;\n\tString name;\n\tString model;\n\n\tcar(String name, String model){\n\t\tthis.name = name;\n\t\tthis.model = model;\n\t}\n}",
		"answers": {
			"0": "boolean equals(car a, car b){\n\treturn (a.numWheels == b.numWheels\n\t&& a.miles == b.miles\n\t&& a.name.equals(b.name)\n\t&& a.model.equals(b.model));\n}",
			"1": "boolean equals(car a, car b){\n\treturn (a.miles == b.miles\n\t&& a.name.equals(b.name)\n\t&& a.model.equals(b.model));\n}",
			"2": "boolean equals(car a, car b){\n\treturn (a.numWheels == b.numWheels\n\t&& a.name.equals(b.name)\n\t&& a.model.equals(b.model));\n}",
			"3": "boolean equals(car a, car b){\n\treturn (a.numWheels == b.numWheels\n\t&& a.miles == b.miles\n\t&& a.name.equals(b.name));\n}"
		},
		"topic": "Object Comparison",
		"Bloom": "5"
	},
	{
		"text": "To initialize a scanner:\n\nScanner scnr = new Scanner(_________);",
		"answers": {
			"0": "System.in",
			"1": "Input.sys",
			"2": "iostream",
			"3": "file.io"
		},
		"topic": "I/O",
		"Bloom": "1"
	},
	{
		"text": "A class name is usually...",
		"answers": {
			"0": "a noun",
			"1": "a verb",
			"2": "a preposition",
			"3": "private to that class"
		},
		"topic": "Classes",
		"Bloom": "3"
	},
	{
		"text": "Which of these will give the number of elements in an array a?",
		"answers": {
			"0": "a.length",
			"1": "a.length()",
			"2": "a.size",
			"3": "a.size()"
		},
		"topic": "Arrays",
		"Bloom": "2"
	},
	{
		"text": "Which one of these is a proper array declaration?",
		"answers": {
			"0": "int[] a = new int[7];",
			"1": "int[] a = new int[];",
			"2": "char c[] = new char[];",
			"3": "char c [7];"
		},
		"topic": "Arrays",
		"Bloom": "2"
	},
	{
		"text": "Which package needs to be imported to use System.out.println?",
		"answers": {
			"0": "No packages needed",
			"1": "java.io",
			"2": "ioStream",
			"3": "stdio"
		},
		"topic": "I/O",
		"Bloom": "2"
	},
	{
		"text": "What will the following code return? Assume a is true, b is false, and c is true.\n\t((a && (b || c)) || b)",
		"answers": {
			"0": "true",
			"1": "false",
			"2": "5",
			"3": "c"
		},
		"topic": "Operators",
		"Bloom": "4"
	},
	{
		"text": "What will be the result of the following code?\n\na[4] = {2, 3, 5, 8};\n\nfor(int i = 0; i == a.length; i++){\n\tc += a[i];\n}\n\nSystem.out.println(c);",
		"answers": {
			 "0": "OutOfBoundsException",
			 "1": "IllegalArgumentException",
			 "2": "18",
			 "3": "10"
		},
		"topic": "Exceptions",
		"Bloom": "3"
	},
	{
		"text": "Consider the following class:\n\nclass Node{\n\tint numStuff;\n\tdouble thing;\n\n\tNode(int numStuff, double thing){\n\t\tnumStuff = numStuff;\n\t\tthing = thing;\n\t}\n}\n\nWhat needs to be changed to produce the desired results?",
		"answers": {
			 "0": "'this.' needs to be inserted before the left hand variables in the constructor",
			 "1": "'this.' needs to be inserted before the right hand variables in the constructor",
			 "2": "The code will work as is",
			 "3": "The code must be completely refactored"
		},
		"topic": "Constructors",
		"Bloom": "5"
	},
	{
		"text": "What is a block comment?",
		"answers": {
			"0": "Multiple lines enclosed by /**/",
			"1": "Multiple lines enclosed by // //",
			"2": "Block comments are just an urban legend",
			"3": "String"
		},
		"topic": "Comments",
		"Bloom": "1"
	},
	{
		"text": "What is the value of an uninitialized int variable?",
		"answers": {
			"0": "null",
			"1": "0",
			"2": "int",
			"3": "5"
		},
		"topic": "Variables",
		"Bloom": "2"
	},
	{
		"text": "To which of these types can operators NOT be applied?",
		"answers": {
			"0": "String",
			"1": "int",
			"2": "char",
			"3": "double"
		},
		"topic": "Operators",
		"Bloom": "2"		
	},
	{
		"text": "Object obj1;\nObject obj2;\nWhich one of these check whether obj1 and obj2 hold the same attributes?",
		"answers": {
			"0": "none of these",
			"1": "obj1 = obj2;",
			"2": "obj1 == obj2;",
			"3": "obj1.equals(obj2);"
		},
		"topic": "Object Comparison",
		"Bloom": "3"
	},
	{
		"text": "What will this print?\n\tSystem.out.print(\"\\tJava is hot.\");",
        "answers": {
            "0": "\tJava is hot.",
            "1": "Java is \n hot.",
            "2": "Java is hot.",
            "3": "\\tJava is hot."
        },
		"topic": "Escape Sequences",
		"Bloom": "2"
	},
	{
		"text": "How do you resolve an uncaught exception?",
		"answers": {
			"0": "Any of these",
			"1": "Add a throws declaration",
			"2": "Surround it with a try/catch block",
			"3": "None of these"
		},
		"topic": "Exceptions",
		"Bloom": "5"
	},
	{
		"text": "Which of these is a legal variable name in Java?",
		"answers": {
			"0": "var",
			"1": "this",
			"2": "new",
			"3": "string"
		},
		"topic": "Variables",
		"Bloom": "1"
	},
	{
		"text": "Which of these types would you use for a variable to hold someone's bank balance?",
		"answers": {
			"0": "double",
			"1": "long",
			"2": "int",
			"3": "char"
		},
		"topic": "Variables",
		"Bloom": "4"
	},
	{
		"text": "A _ 's name is usually a verb",
		"answers": {
			"0": "method",
			"1": "object",
			"2": "class",
			"3": "main"
		},
		"topic": "Methods",
		"Bloom": "4"
	},
	{
		"text": "Which one of these allows you to initialize an object?",
		"answers": {
			"0": "constructor",
			"1": "method header",
			"2": "main",
			"3": "class" 
		},
		"topic": "Constructors",
		"Bloom": "1"
	},
	{
		"text": "An interface is...?",
		"answers": {
			"0": "A collection of abstract methods",
			"1": "An environment for developing Java code",
			"2": "An instance of a class",
			"3": "Essential for the working product"
		},
		"topic": "Interfaces",
		"Bloom": "3"
	},
	{
		"text": "All methods in an interface are by default _______.",
		"answers": {
			"0": "abstract",
			"1": "private",
			"2": "void",
			"3": "overloaded"
		},
		"topic": "Interfaces",
		"Bloom": "2"
	},
	{
		"text": "Which of these is NOT a key way in which interfaces differ from classes?",
		"answers": {
			"0": "An interface cannot have methods",
			"1": "An interface cannot be instantiated",
			"2": "Everything in an interface is abstract",
			"3": "A class does not extend an interface but implements it"
		},
		"topic": "Interfaces",
		"Bloom": "4"
	},
	{
		"text": "What package contains the necessary imports to read and write to files?",
		"answers": {
			"0": "java.io",
			"1": "java.file",
			"2": "java.util",
			"3": "java.lang"
		},
		"topic": "Packages",
		"Bloom": "1"
	},
	{
		"text": "What keyword would you use to add a package to your project?",
		"answers": {
			 "0": "import",
			 "1": "add",
			 "2": "include",
			 "3": "package"
		},
		"topic": "Packages",
		"Bloom": "1"
	},
	{
		"text": "What do packages do?",
		"answers": {
			"0": "prevent naming conflicts",
			"1": "control access to classes",
			"2": "make searching classes easier",
			"3": "all of the above"
		},
		"topic": "Packages",
		"Bloom": "3"
	},
	{
		"text": "Which of these is not a principle of object oriented programmming?",
		"answers": {
			"0": "iteration",
			"1": "abstraction",
			"2": "polymorphism",
			"3": "inheritance"
		},
		"topic": "Miscellaneous Object Oriented Programming",
		"Bloom": "5"
	},
	{
		"text": "An object...",
		"answers": {
			"0": "Is an instance of a class",
			"1": "Is a variable",
			"2": "Belongs to a package",
			"3": "Is always private"
		},
		"topic": "Miscellaneous Object Oriented Programming",
		"Bloom": "5"
	},
	{
		"text": "What is encapsulation?",
		"answers": {
			"0": "Keeping data hidden from methods that don't explicitly need that data",
			"1": "An instace of a class",
			"2": "A working product",
			"3": "A new form of packaging"
		},
		"topic": "Miscellaneous Object Oriented Programming",
		"Bloom": "4"
	},
	{
		"text": "Which of these will correctly compare objects obj1 and obj2?",
		"answers": {
			"0": "none of these",
			"1": "obj1 = obj2",
			"2": "obj1 == obj2",
			"3": "obj1.equals(obj2)"
		},
		"topic": "Object Comparison",
		"Bloom": "4"
	},
	{
		"text": "What is the default delimiter for Scanner.next()?",
		"answers": {
			"0": "Whitespace",
			"1": "//",
			"2": "Only /n",
			"3": "tabs"
		},
		"topic": "I/O",
		"Bloom": "4"
	}
]